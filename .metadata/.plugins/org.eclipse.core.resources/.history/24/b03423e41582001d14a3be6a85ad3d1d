package Pb15;

import java.awt.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import fichiers.Fichiers;

public class Pb15_1 
{
	static List<CapteurBalise> capteursBalises = new ArrayList<CapteurBalise>();
	static List<Point> balises = new ArrayList<Point>();
	static char[][] caracteres;
	//les points extrèmes
	static int miniX = Integer.MAX_VALUE, maxiX = Integer.MIN_VALUE, miniY = Integer.MAX_VALUE, maxiY = Integer.MIN_VALUE;
	static int longueur, hauteur;
	static int ligneTest;
	
	public static void main(String[] args)  throws IOException 
	{
		//les données
		String donnees = Fichiers.chargerContenuTexte("F:\\AOC\\calendrier avent\\pb 15.txt");
		ligneTest = 2000000;

		//test
		donnees = "Sensor at x=2, y=18: closest beacon is at x=-2, y=15\n"
				+ "Sensor at x=9, y=16: closest beacon is at x=10, y=16\n"
				+ "Sensor at x=13, y=2: closest beacon is at x=15, y=3\n"
				+ "Sensor at x=12, y=14: closest beacon is at x=10, y=16\n"
				+ "Sensor at x=10, y=20: closest beacon is at x=10, y=16\n"
				+ "Sensor at x=14, y=17: closest beacon is at x=10, y=16\n"
				+ "Sensor at x=8, y=7: closest beacon is at x=2, y=10\n"
				+ "Sensor at x=2, y=0: closest beacon is at x=2, y=10\n"
				+ "Sensor at x=0, y=11: closest beacon is at x=2, y=10\n"
				+ "Sensor at x=20, y=14: closest beacon is at x=25, y=17\n"
				+ "Sensor at x=17, y=20: closest beacon is at x=21, y=22\n"
				+ "Sensor at x=16, y=7: closest beacon is at x=15, y=3\n"
				+ "Sensor at x=14, y=3: closest beacon is at x=15, y=3\n"
				+ "Sensor at x=20, y=1: closest beacon is at x=15, y=3";
		ligneTest = 10;
		
		
		remplirListes(donnees);
		
		longueur = maxiX - miniX + 1;
		hauteur = maxiY - miniY + 1;
		ligneTest -= miniY;
		caracteres = new char[hauteur][longueur];
		for(int i = 0; i < hauteur; i++)
		{
			for(int j = 0; j < longueur; j++)
			{
				caracteres[i][j] = '.';
			}
		}

//		System.out.println(miniY);
//		System.out.println(ligneTest);
		for(CapteurBalise cb : capteursBalises)
		{
			Point c = cb.capteur;
			int d = cb.distance;
			
			//pour les capteurs dont la zone de détection rencontre la ligne test
			if (Math.abs(ligneTest + miniY - c.y) <= d)
			{
				int j = ligneTest + miniY -c.y;
				cb.addIntervalle(new Intervalle(new Point(c.x + d - j, c.y + j), d-j)); 
			}
			setCaractere(c,'S');
			Point b = cb.balise;
			setCaractere(b,'B');
			
//			System.out.println(cb);
//			System.out.println(caracteres[ligneTest]);
		}
		
		for(CapteurBalise cb : capteursBalises)
		{
			Point c = cb.capteur;
			int d = cb.distance;
			boolean test = c.equals(new Point(9,16));
			
			if (test) System.out.println(cb);
			if (test) System.out.println(Math.abs(ligneTest + miniY - c.y) <= d);
			//pour les capteurs dont la zone de détection rencontre la ligne test
			if (Math.abs(ligneTest + miniY - c.y) <= d)
			{
				int j = ligneTest + miniY -c.y;
				if (test) System.out.println(j);
				cb.addIntervalle(new Intervalle(new Point(c.x + d - j, c.y + j), d-j)); 
				if (test) System.out.println(new Intervalle(new Point(c.x + d - j, c.y + j), d-j).longueur());
			}
//			setCaractere(c,'S');
			Point b = cb.balise;
//			setCaractere(b,'B');
			
//			System.out.println(cb);
//			System.out.println(cb);
//			System.out.println(caracteres[ligneTest]);
		}
		
				
//		int nb =0;
//		for(char c : caracteres[ligneTest])
//			if (c == '#') nb++;
//		System.out.println(nb);
	}

	private static void setCaractere(Point point, char c) 
	{
		setCaractere(point.x, point.y, c);
		
	}

	private static void setCaractere(int x, int y, char c) 
	{
		if (x <= maxiX && x >= miniX && y <= maxiY && y >= miniY) 
		{
//			if (caracteres[y - miniY][x - miniX] == '.') 
				caracteres[y - miniY][x - miniX] = c;
				
//			if (c == '#' && y-miniY == 12 ) throw new RuntimeException("Problème sur " + new Point(x,y));
		}
	}

	private static String afficher() 
	{
		System.out.println(miniX + " < x < " + maxiX);
		System.out.println(miniY + " < x < " + maxiY);
		String s = "";
		for(int i = 0; i < hauteur; i++)
		{
			s += "\n" + (i + miniY) + "\t" + new String(caracteres[i]);
		}
		return s;
	}
	
	private static void remplirListes(String donnees) 
	{
		int x, y, n1, n2;
		Point capteur, balise;
		
		
		for(String s : donnees.split("\n"))
		{
			//"Sensor at x=2, y=18: closest beacon is at x=-2, y=15"
			n1 = s.indexOf('=') + 1;
			n2 = s.indexOf(',');
			x = Integer.parseInt(s.substring(n1,n2));
			n1 = s.indexOf('=', n2) + 1;
			n2 = s.indexOf(':');
			y = Integer.parseInt(s.substring(n1,n2));
			capteur = new Point(x,y);
			
			n1 = s.indexOf('=', n2) + 1;
			n2 = s.indexOf(',', n1);
			x = Integer.parseInt(s.substring(n1,n2));
			n1 = s.indexOf('=', n1) + 1;
			y = Integer.parseInt(s.substring(n1));
			balise = new Point(x,y);
			
			CapteurBalise cb = new CapteurBalise(capteur, balise);
			capteursBalises.add(cb);
			x = Math.min(capteur.x,  balise.x);
			if (x < miniX) miniX = x;
			x = Math.max(capteur.x, balise.x);
			if (x > maxiX) maxiX = x;
			y = Math.min(capteur.y,  balise.y);
			if (y < miniY) miniY = y;
			y = Math.max(capteur.y, balise.y);
			if (y > maxiY) maxiY = y;
		}
	}

	static class CapteurBalise
	{
		public int distance;
		Point capteur, balise; 
		List<Intervalle>intervalles = new ArrayList<Intervalle>();
		String valeur;
		
		public CapteurBalise(Point capteur, Point balise) 
		{
			this.capteur = capteur;
			this.balise = balise;
			distance = Math.abs(capteur.x - balise.x) + Math.abs(capteur.y - balise.y);
		}
		
		public void addIntervalle(Intervalle intervalle) 
		{
			this.intervalles.add(intervalle);
		}
		
		public String toString()
		{
			String s = "capteur = " + capteur + " et balise = " + balise + " distance = " + distance + "\n\t";
			if (! intervalles.isEmpty())
			{
				for (int i = 0; i <= intervalles.get(0).longueur(); i++)
				{
					s += "#";
				}
			}
			else s += "rien";
			
			return s;
		}
	}
	static class Intervalle
	{
		Point A, B;
		int longueur = -1;
		
		public Intervalle(Point A, int d)
		{
			this.A = new Point(A.x-d,A.y);
			this.B = new Point(A.x+d, A.y);
			longueur = 2*d;
		}

		public int longueur() 
		{
			return longueur;
		}
	}
	
	
}
