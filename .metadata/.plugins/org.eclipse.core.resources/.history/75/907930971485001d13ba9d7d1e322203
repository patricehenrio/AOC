package Pb11;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import AOC.AOC;
import Pb11.Pb11_1.Singe;

public class Pb11 extends AOC 
{
	static Singe[] singes = new Singe[8];
	static int nbRounds;
	static int nbSinges;
	static int round = 0;
	
	public static void main(String[] args) throws IOException 
	{
		String donnees = chargerDonnees("pb 11.txt");
		
		test();
		
		//première partie
		System.out.println(partie_1());
		//Deuxième partie
		System.out.println(partie_2());
		

		
	}

	private static String partie_2() 
	{
		// TODO Auto-generated method stub
		return null;
	}

	private static String partie_1() 
	{
		// TODO Auto-generated method stub
		return null;
	}

	private static void test() 
	{
		//test
		String donnees = "Monkey 0:\n"
				+ "  Starting items: 79, 98\n"
				+ "  Operation: new = old * 19\n"
				+ "  Test: divisible by 23\n"
				+ "    If true: throw to monkey 2\n"
				+ "    If false: throw to monkey 3\n"
				+ "\n"
				+ "Monkey 1:\n"
				+ "  Starting items: 54, 65, 75, 74\n"
				+ "  Operation: new = old + 6\n"
				+ "  Test: divisible by 19\n"
				+ "    If true: throw to monkey 2\n"
				+ "    If false: throw to monkey 0\n"
				+ "\n"
				+ "Monkey 2:\n"
				+ "  Starting items: 79, 60, 97\n"
				+ "  Operation: new = old * old\n"
				+ "  Test: divisible by 13\n"
				+ "    If true: throw to monkey 1\n"
				+ "    If false: throw to monkey 3\n"
				+ "\n"
				+ "Monkey 3:\n"
				+ "  Starting items: 74\n"
				+ "  Operation: new = old + 3\n"
				+ "  Test: divisible by 17\n"
				+ "    If true: throw to monkey 0\n"
				+ "    If false: throw to monkey 1";
		nbSinges = 4; 
		String[] notes = donnees.split("\n\n");
		nbRounds = 20;
		for(String s : notes)
		{
			int n = Integer.parseInt(s.substring(7,8));
			singes[n] = new Singe(s);
//			System.out.println(singes[n]);
		}
		while (round < nbRounds)
		{ 
			round++;
			System.out.println("round " + round + " position avant la ronde");
			afficherWL();
			System.out.println(singes[2]);
			for(int i : singes[3].worryLevel) System.out.println(i);
			for(int n = 0; n < nbSinges; n++)
			{
				traiter(singes[n]);
			}
			
//			if (test) afficherWL();
		}

	}

	private static void afficherWL() 
	{
		for(int i = 0; i < nbSinges; i++)
		{
			String s = "Monkey " + i + "\t" + "";
			for(Long t : singes[i].getWorryLevel())
			{
				s += t + ", ";
			}
			System.out.println(s);
		}
	}

	static class Singe
	{
		int numero;
		List<Long> worryLevel = new ArrayList<Long>();
		int divisible;
		int[] destinataires = new int[2];
		int totalInspection = 0;

		String operation;
		
		public Singe(String s) 
		{
			String[] donnees = s.split("\n");
			//numero
			numero = Integer.parseInt(s.substring(7,8));
			
			//liste des items
			String liste = donnees[1].substring(18);
			String[] listeItems = liste.split(", ");
			for(String item : listeItems)
			{
				worryLevel.add((long) Integer.parseInt(item));
			}
			
			//operation
			operation = donnees[2].substring(23);
			
			//test
			divisible = Integer.parseInt(donnees[3].substring(21));
			
			//destinataires
			destinataires[0] = Integer.parseInt(donnees[4].substring(29));
			destinataires[1] = Integer.parseInt(donnees[5].substring(30));
		}

		public void incrementeTotalInspection() 
		{
			totalInspection++;
			
		}

		public void videWorryLevel() 
		{
			worryLevel.clear();
		}

		public void ajouteWorryLevel(long wl) 
		{
			worryLevel.add(wl);
		}

		public int[] getDestinataires() {
			return destinataires;
		}

		public void setDestinataires(int[] destinataires) {
			this.destinataires = destinataires;
		}

		public int getDivisible() {
			return divisible;
		}

		public void setDivisible(int divisible) {
			this.divisible = divisible;
		}
		public int getNumero() {
			return numero;
		}

		public void setNumero(int numero) {
			this.numero = numero;
		}

		public List<Long> getWorryLevel() {
			return worryLevel;
		}

		public void setWorryLevel(List<Long> worryLevel) {
			this.worryLevel = worryLevel;
		}

		public String getOperation() {
			return operation;
		}

		public void setOperation(String operation) {
			this.operation = operation;
		}
		
		public int getTotalInspection() {
			return totalInspection;
		}

		public void setTotalInspection(int totalInspection) {
			this.totalInspection = totalInspection;
		}

		public String toString()
		{
			String s = "Monkey " + numero + ":";
			
			s += "\n  Starting items:";
			String t = "";
			for(Long i : worryLevel) t += ", " + i;
			if (! t.isEmpty()) t= t.substring(1); 
			s += t; 
			s += "\n  Operation: new = old " + operation;
			
			s += "\n  Test: divisible by " + divisible;
			
			s += "\n    If true: throw to Monkey " + destinataires[0];
			s += "\n    If false: throw to Monkey " + destinataires[1];
			
			return s + "\n";
		}
	}
	
}
