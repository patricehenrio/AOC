package Pb13;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import fichiers.Fichiers;

public class Pb13_1 
{
	static boolean test = false;
	public static void main(String[] args) throws IOException 
	{
//		//les données
//		String donnees = Fichiers.chargerContenuTexte("F:\\AOC\\calendrier avent\\pb 13.txt");
//
//		//test
////		donnees = Fichiers.chargerContenuTexte("F:\\AOC\\calendrier avent\\pb 13 test.txt");
//		List<Paire> lesPaires = new ArrayList<Paire>();
//		int n = 0;
//		for(String s : donnees.split("\n\n")) 
//		{
//			n++;
////			if (n == 133) System.out.println(s);
////			System.out.println("************* " + n + " *************");
//			lesPaires.add(new Paire(s));
//		}
//		
//		int total = 0;
//		for(int i = 0; i < lesPaires.size(); i++)
//		{
//			Paire paire = lesPaires.get(i);
//			if (paire.isBonOrdre()) total += (i+1);
//		}
//		System.out.println(total);
//		System.out.println(lesPaires.get(132));
//		test = true;
//		Paire paire = new Paire("[[[1]],1]\n"
//				+ "[[1],2]");
//		System.out.println(paire.bonOrdre);
		System.out.println(new Paquet("[[[1]],1]"));
//		System.out.println(new Paquet("[[1],2]"));
		
	}

	static class Paire
	{
		Paquet left, right;
		boolean bonOrdre = true;
		
		public Paire(String s) 
		{
//			boolean test = s.equals("[[5,0],[[[0]]],[4,[10],0,[[5,6,4,2,5],4,[],[3,1,4,9,3]],2],[7,6,8,8],[[0,[4,3],[],[],[]],0,5]]\r\n"
//					+ "[[5],[9,0,[],[[6,0],[6,3],2],[3]],[[[3,1,2,5]],[0],4,[[2],10,[4,6,10,10,0],4,[5,9]],0],[2,[[],[1],4,0,10],9]]");
//			System.out.println(s);
			String[] paire = s.split("\n");
			
			
			left = new Paquet(paire[0]);
//			System.out.println(paire[0]);
//			System.out.println("\t" + left);
			right = new Paquet(paire[1]);
//			System.out.println(paire[1]);
//			System.out.println("\t" + right);
			bonOrdre = (left.compareTo(right) < 0); 
//			System.out.println(bonOrdre);
		}

		public boolean isBonOrdre() 
		{
			return bonOrdre;
		}
		
		public String toString()
		{
			return left + "\n" + right;
		}
	}
	
	static class Paquet implements Comparable<Paquet>
	{
		String debut = "", suite = "";
		
		public Paquet(String s) 
		{
			boolean test = (s.equals("[[[1]],1]"));
//			System.out.println("test " + s);
			
			if (s.equals("[]")) return;
			if (s.isEmpty()) return;
			if (s.startsWith("["))
				s = s.substring(1, s.length()-1);
			if (test) System.out.println(s.length());

			
			int i = 0;
			char c = s.charAt(0);
			if (test) System.out.println(c);
			switch (c)
			{
				case '[' :
					int nbOuvrant = 1;
					debut += c;
					if (test) System.out.println("d : " + debut);
					i++;
					if (test) System.out.println(i);
					while(i < s.length())
					{
						System.out.println("i = " + i);
						c = s.charAt(i);
						if (test) System.out.println("c = " + c);
						debut += c;
						if (test) System.out.println("d : " + debut);
						
						switch (c)
						{
							case ']' :
								nbOuvrant--;
								i++;
								break;
							case '[' :
								nbOuvrant++;
							default : 
								i++;
						}
						if (test) System.out.println("nbo = " + nbOuvrant);
						if (nbOuvrant == 0) break;
					}
					if (i < s.length()-1) suite = s.substring(i+1);
					
				default :
//					if (test) System.out.println(c >= '0' && c <= '9');
					while (c >= '0' && c <= '9')
					{
						debut += c;
//						if (test) System.out.println("début " + debut);

						i++;
//						if (test) System.out.println(i);
						if (i < s.length())  c = s.charAt(i);
						else break;
					}
					if (i < s.length()-1) 
					{
						if (s.charAt(i+1) == ',') i++;
						suite = s.substring(i+1);
					}
					else suite = "";
			}
		}

		public String toString()
		{
			return((debut.isEmpty() ? null : debut) + " ---> " + (suite.isEmpty() ? null : suite));
		}

		@Override
		public int compareTo(Paquet paquet) 
		{
			if (this.equals(paquet)) return 0;
			
			String gauche = debut;
			String droite = paquet.debut;
			
//			if (test) System.out.println("compareTo : " + gauche + " et " + droite);
			
			if (gauche.equals(droite))
			{
				if (suite.isEmpty()) return -1;
				if (paquet.suite.isEmpty()) return 1;
				return new Paquet(suite).compareTo(new Paquet(paquet.suite));
			}
			
			if (gauche.isEmpty()) return -1;
			if (droite.isEmpty()) return 1;
			
			char g = gauche.charAt(0);
			char d = droite.charAt(0);
			
//			if (test) System.out.println("\t" + g + " et " + d);
			
			if (g == '[' && d == '[')
			{
				if (test) System.out.println("\t" + new Paquet(gauche) + " et " + new Paquet(droite));
				int n = new Paquet(gauche).compareTo(new Paquet(droite));
				if (test) System.out.println("\t" + n);
				if (n < 0) return -1;
				if (n > 0) return 1;
				return new Paquet(suite).compareTo(new Paquet(paquet.suite));
			}
			
			if (Character.isDigit(g) && Character.isDigit(d)) 
			{
				int n = Integer.parseInt(gauche)-Integer.parseInt(droite);
				if (n < 0) return -1;
				if (n > 0) return 1;
				
				System.out.println(new Paquet(suite));
				System.out.println(new Paquet(paquet.suite));
				return new Paquet(suite).compareTo(new Paquet(paquet.suite));
				
			}
			
			if (g == '[' && d != '[')
			{
				int n = new Paquet(gauche).compareTo(new Paquet("[" + droite + "]"));
				if (n < 0) return -1;
				if (n > 0) return 1;
				return new Paquet(suite).compareTo(new Paquet(paquet.suite));
			}
			
			if (g != '[' && d == '[')
			{
				int n = new Paquet("[" + gauche + "]").compareTo(new Paquet(droite));
				if (n < 0) return -1;
				if (n > 0) return 1;
				return new Paquet(suite).compareTo(new Paquet(paquet.suite));
			}

			throw new RuntimeException("\n\t" + gauche + "\n\t" + droite);
		}


		private int obtenirEntier(String s) 
		{
			int v = s.indexOf(',');
			int f = s.indexOf(']');
			
			if (v < 0 && f < 0) return Integer.parseInt(s);
			int n = (v < 0 ? f : (f < 0 ? v : Math.min(f, v)));
			
			
			return Integer.parseInt(s.substring(0,n));
		}


		private String determinerListe(String s) 
		{
			int nbCrochetOuvrant = 0;
			String retour = "";
			for(int i = 0; i < s.length(); i++)
			{
				char c = s.charAt(i);
				retour += c;
				if (c == '[') nbCrochetOuvrant++;
				else if (c == ']') 
				{
					nbCrochetOuvrant--;
					if (nbCrochetOuvrant == 0) 
					{
						return retour;
					}
				}
			}
			
			throw new RuntimeException("Problème de liste sur " + s);
		}

		private boolean equals(Paquet autre)
		{
			return debut.equals(autre.debut) && suite.equals(autre.suite);
		}
		
	}
}
